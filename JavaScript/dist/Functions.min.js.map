{"version":3,"sources":["Functions.js"],"names":["li","callarray","_i","_li","length","console","log","i","value1","pi","string1","string2","value2","add","sum","value3","ans","num","print1","calltwice","value","rolldie","Math","random","roll","floor","min","max","isvalue","findvalue","math","a","b","sub","mul","firstname","lastname","fullname","concat","this","person","toUpperCase","forme","forEach","el","forme1","movie","price","li1","map","val","square","x","setTimeout","setInterval"],"mappings":"aACA,IAAIA,GAAK,CAAC,MAAO,QAAS,QAG1B,SAASC,YAAT,IAAA,IAAAC,EAAA,EAAAC,EAASF,GAATC,EAAAC,EAAAC,OAAAF,IAASD,EAATE,EAAAD,GACIG,QAAAC,IAAAC,GAECN,YAELA,IAAAA,OAEA,GAEA,GAAc,IAAVO,OADAA,IAAMC,GAAV,KAGQC,QAAU,MAFdF,QAAc,QAEdH,QAAIK,IAAAA,QAEPL,QAAAC,IAAAK,SAOD,IAAIC,OAAS,GAJbP,OAAYM,GAGZ,SAAAE,MAKI,IAAIC,EAAMF,OAASG,OAGfV,QAAQC,IAAIQ,GADhBD,MAQJ,IAAIG,IAAM,SAASC,GALfC,QAASZ,IAAAW,EAAAA,IAKb,SAAOE,UAAHH,GACAX,IADJe,IAWA,SAASC,UALT,IAASF,EAAAA,KAAUC,MAAO,EAAAE,KAAAC,SAAA,GACtBH,QAAKd,IAAAkB,GAKL,SAAMA,UAAYC,EAAOH,GACzBjB,OAAQC,SAARW,GACHZ,QAAAC,IAAAoB,GAAAT,GAAAA,GAAAU,IAXDX,IAAI,GAMHG,UAAAE,SAcD,IAAMO,QAAUC,UAAU,IAAK,KAL/BD,QAAA,KACIA,QAAA,KAGH,IAAAE,KAAA,CAOOjB,IAAK,SAASkB,EAAGC,GANZ3B,QAAGwB,IAAUE,EAADC,IASjBC,IAAK,SAASF,EAAGC,GAPzB3B,QAAaC,IAAAyB,EAAAC,IAULE,IAAK,SAASH,EAAGC,GAPd3B,QAAAC,IAAAyB,EAAAC,KAIHC,KAAGpB,IAAE,EAAA,GACDR,KAAAA,IAAAA,EAAQC,GAGRD,IAAAA,OAAQC,CACX6B,UAAA,SAELC,SAAA,UAQAC,SAXgB/B,WAIpBD,QAAgBC,IAAhB,cAAAgC,OAAgBC,KAAAJ,UAAhB,KAAAG,OAAgBC,KAAAH,aAGhBI,OAAAH,WAEIF,IACAC,QAAU9B,IAAA,QAFDmC,eAGTJ,MAAAA,GACIhC,QAAQC,IAAR,YAaR,IAAIoC,MAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAP/BA,MAAIC,QAAA,SAAAC,GACAvC,QAAQC,IAAIsC,EAAAA,KAYhB,IAAIC,OAAS,CAAC,CACNC,MAAO,KAPXJ,MAAQ,KAERrC,CAGJyC,MAAA,OAOQC,MAAO,IALPD,CACKA,MAAE,SAEXC,MAAA,MAAAF,OAIAF,QAAA,SAAAvB,GACI0B,QAAOxC,IAAPwC,GAAAA,OADJ1B,EAAA0B,MACIA,UAAAA,OADJ1B,EAAA2B,UAMA1C,IAAAA,IAAQC,CAAAA,EAAR,EAAA,EAAA,EAAA,EAAec,EAAK,EAAC0B,EAArB,EAAA,GAAA,GAAA,GAAA,GAAgC1B,GAAM2B,IACzCC,IAEDC,IAAA,SAAAC,GAGQA,EAAM,GAAM,GAFb7C,QAAGC,IAAU4C,KAKnB,IAEDC,OAAA,SAAAC,GAEI,OAAOA,EAAIA,GAAX/C,QAAAC,IAAQ6C,OAAR,IAEJ9C,WAAA,WAIQA,QAAQC,IAAI,+CADpB+C,KAEKC,YACD,WAEAjD,QAAQC,IAAI,uBADhBgD","file":"Functions.min.js","sourcesContent":["// Here we are going to use Functions properties\r\nlet li = ['red', 'green', 'blue'];\r\n\r\n// BASIC Creating of Functions\r\nfunction callarray() {\r\n    for (i of li) {\r\n        console.log(i);\r\n    }\r\n}\r\ncallarray()\r\n\r\n//Block Scooping\r\nlet value1 = 28;\r\nif (value1 >= 28) {\r\n    const pi = 3.14;\r\n    let string1 = \"hii\";\r\n    var string2 = \"hello\";\r\n}\r\nconsole.log(value1); // It can be accesed every where beacuse it is defined outside the function\r\n//console.log(string1); //it will show error because we defined it inside a block it can't be called outside the function \r\nconsole.log(string2); //it will work because we use var to define it now it is not scooped to particullar block\r\n\r\n// Getting familiar with Lexical Scooping\r\n// I f we deifne some outer function and some inner function is defined inside itwe can't call variable defined in outer func into inner function\r\nlet value2 = 25;\r\nlet value3 = 28;\r\n\r\nfunction add() {\r\n    let sum = value2 + value3;\r\n\r\n    function print1() {\r\n        console.log(sum); // it will show error because sum is defined in outer function\r\n    }\r\n    print1() // we are calling this function so that we can access to sum which is defined in outer function\r\n}\r\nadd()\r\n\r\n// Function Expression Here we give pass particular value to a variable in function\r\nlet ans = function(num) {\r\n    console.log(num * num);\r\n}\r\nans(7);\r\n\r\n//Higher Order Function Here we are passing a function as an argument to another function\r\nfunction calltwice(value) {\r\n    value();\r\n    value();\r\n}\r\n\r\nfunction rolldie() {\r\n    const roll = Math.floor((Math.random() * 6) + 1);\r\n    console.log(roll)\r\n}\r\ncalltwice(rolldie);\r\n\r\n// Returning Function Here we return a function inside a function\r\nfunction findvalue(min, max) {\r\n    return function(num) {\r\n        console.log(num >= min && num <= max);\r\n    }\r\n}\r\nconst isvalue = findvalue(100, 200);\r\nisvalue(100) // return true\r\nisvalue(700) // return False\r\n\r\n// Methods We can add functions as properties on object\r\nlet math = {\r\n        add: function(a, b) {\r\n            console.log(a + b);\r\n        },\r\n        sub: function(a, b) {\r\n            console.log(a - b);\r\n        },\r\n        mul: function(a, b) {\r\n            console.log(a * b);\r\n        }\r\n    }\r\n    // Calling functions in objects\r\nmath.add(2, 3); //5\r\nmath.mul(4, 7); //28\r\n\r\n// This in Methods : it is used to access other values in object\r\nlet person = {\r\n    firstname: \"Neeraj\",\r\n    lastname: \"kaushik\",\r\n    fullname() {\r\n        console.log(`My name is ${this.firstname} ${this.lastname}`);\r\n    }\r\n}\r\nperson.fullname();\r\n\r\n//Try and Catch: Here the complier will try first case if it will run its okay otherwise it will run catch case \r\ntry {\r\n    console.log(\"hello\".toUpperCase()); //if we will write hello outside inverted commas it will not work\r\n} catch {\r\n    console.log(\"Error!!!\"); // if upper statement will not work then it will work\r\n}\r\n\r\n// For Each : In this method our particular function will for every value in the array\r\nlet forme = [1, 2, 3, 4, 5, 6, 7]\r\nforme.forEach(function(el) {\r\n    console.log(el * el)\r\n})\r\n\r\n// Working for each on array of objects\r\nlet forme1 = [{\r\n        movie: 'F9',\r\n        price: 210\r\n    },\r\n    {\r\n        movie: 'ddlj',\r\n        price: 50\r\n    },\r\n    {\r\n        movie: 'toofan',\r\n        price: 150\r\n    }\r\n]\r\nforme1.forEach(function(value) {\r\n    console.log(`${value.movie}-->${value.price}`)\r\n})\r\n\r\n//Map: It will create another array from the same array by appling some condtion of the array\r\nlet li1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nli1.map(function(val) {\r\n    if (val % 2 === 0) {\r\n        console.log(val)\r\n    }\r\n})\r\n\r\n//Arrow Function: using this we can compact our function into a smaller format\r\nconst square = (x) => {\r\n    return x * x;\r\n}\r\nconsole.log(square(6))\r\n\r\n//SetTimeout: This function is used so that articular output will be print after some seconds given by the user\r\nsetTimeout(() => {\r\n        console.log(\"this is function fot timeout in javascript\")\r\n    }, 3000)\r\n    //SetInterval:I t will print particular text after every interval of given time\r\nsetInterval(() => {\r\n    console.log(\"using set interval\")\r\n}, 2000)"]}