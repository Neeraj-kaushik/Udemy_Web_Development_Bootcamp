{"version":3,"sources":["Functions.js"],"names":["li","callarray","i","console","log","value1","pi","string1","string2","value2","value3","add","sum","print1","ans","num","calltwice","value","rolldie","roll","Math","floor","random","findvalue","min","max","isvalue","math","a","b","sub","mul","person","firstname","lastname","fullname","toUpperCase","forme","forEach","el","forme1","movie","price","li1","map","val","square","x","setTimeout","setInterval"],"mappings":"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","sourcesContent":["// Here we are going to use Functions properties\r\nlet li = ['red', 'green', 'blue'];\r\n\r\n// BASIC Creating of Functions\r\nfunction callarray() {\r\n    for (i of li) {\r\n        console.log(i);\r\n    }\r\n}\r\ncallarray()\r\n\r\n//Block Scooping\r\nlet value1 = 28;\r\nif (value1 >= 28) {\r\n    const pi = 3.14;\r\n    let string1 = \"hii\";\r\n    var string2 = \"hello\";\r\n}\r\nconsole.log(value1); // It can be accesed every where beacuse it is defined outside the function\r\n//console.log(string1); //it will show error because we defined it inside a block it can't be called outside the function \r\nconsole.log(string2); //it will work because we use var to define it now it is not scooped to particullar block\r\n\r\n// Getting familiar with Lexical Scooping\r\n// I f we deifne some outer function and some inner function is defined inside itwe can't call variable defined in outer func into inner function\r\nlet value2 = 25;\r\nlet value3 = 28;\r\n\r\nfunction add() {\r\n    let sum = value2 + value3;\r\n\r\n    function print1() {\r\n        console.log(sum); // it will show error because sum is defined in outer function\r\n    }\r\n    print1() // we are calling this function so that we can access to sum which is defined in outer function\r\n}\r\nadd()\r\n\r\n// Function Expression Here we give pass particular value to a variable in function\r\nlet ans = function(num) {\r\n    console.log(num * num);\r\n}\r\nans(7);\r\n\r\n//Higher Order Function Here we are passing a function as an argument to another function\r\nfunction calltwice(value) {\r\n    value();\r\n    value();\r\n}\r\n\r\nfunction rolldie() {\r\n    const roll = Math.floor((Math.random() * 6) + 1);\r\n    console.log(roll)\r\n}\r\ncalltwice(rolldie);\r\n\r\n// Returning Function Here we return a function inside a function\r\nfunction findvalue(min, max) {\r\n    return function(num) {\r\n        console.log(num >= min && num <= max);\r\n    }\r\n}\r\nconst isvalue = findvalue(100, 200);\r\nisvalue(100) // return true\r\nisvalue(700) // return False\r\n\r\n// Methods We can add functions as properties on object\r\nlet math = {\r\n        add: function(a, b) {\r\n            console.log(a + b);\r\n        },\r\n        sub: function(a, b) {\r\n            console.log(a - b);\r\n        },\r\n        mul: function(a, b) {\r\n            console.log(a * b);\r\n        }\r\n    }\r\n    // Calling functions in objects\r\nmath.add(2, 3); //5\r\nmath.mul(4, 7); //28\r\n\r\n// This in Methods : it is used to access other values in object\r\nlet person = {\r\n    firstname: \"Neeraj\",\r\n    lastname: \"kaushik\",\r\n    fullname() {\r\n        console.log(`My name is ${this.firstname} ${this.lastname}`);\r\n    }\r\n}\r\nperson.fullname();\r\n\r\n//Try and Catch: Here the complier will try first case if it will run its okay otherwise it will run catch case \r\ntry {\r\n    console.log(\"hello\".toUpperCase()); //if we will write hello outside inverted commas it will not work\r\n} catch {\r\n    console.log(\"Error!!!\"); // if upper statement will not work then it will work\r\n}\r\n\r\n// For Each : In this method our particular function will for every value in the array\r\nlet forme = [1, 2, 3, 4, 5, 6, 7]\r\nforme.forEach(function(el) {\r\n    console.log(el * el)\r\n})\r\n\r\n// Working for each on array of objects\r\nlet forme1 = [{\r\n        movie: 'F9',\r\n        price: 210\r\n    },\r\n    {\r\n        movie: 'ddlj',\r\n        price: 50\r\n    },\r\n    {\r\n        movie: 'toofan',\r\n        price: 150\r\n    }\r\n]\r\nforme1.forEach(function(value) {\r\n    console.log(`${value.movie}-->${value.price}`)\r\n})\r\n\r\n//Map: It will create another array from the same array by appling some condtion of the array\r\nlet li1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nli1.map(function(val) {\r\n    if (val % 2 === 0) {\r\n        console.log(val)\r\n    }\r\n})\r\n\r\n//Arrow Function: using this we can compact our function into a smaller format\r\nconst square = (x) => {\r\n    return x * x;\r\n}\r\nconsole.log(square(6))\r\n\r\n//SetTimeout: This function is used so that articular output will be print after some seconds given by the user\r\nsetTimeout(() => {\r\n        console.log(\"this is function fot timeout in javascript\")\r\n    }, 3000)\r\n    //SetInterval:I t will print particular text after every interval of given time\r\nsetInterval(() => {\r\n    console.log(\"using set interval\")\r\n}, 2000)"],"file":"Functions.dev.js"}